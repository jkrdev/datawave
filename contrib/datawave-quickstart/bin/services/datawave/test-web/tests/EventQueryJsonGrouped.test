
    ################################################################
############ 'GROUPED' QUERY TESTS FOR NESTED JSON VALUES ##############
    ################################################################

# Demonstrates DataWave's support for persisting and leveraging hierarchical context of raw source data to
# perform queries

# These tests will use the function '#MATCHES_IN_GROUP_LEFT' (Lucene syntax) (or 'grouping:matchesInGroupLeft'
# in JEXL syntax) to determine matches based on the hierarchical position of elements in our nested JSON.

# MATCHES_IN_GROUP_LEFT can be handy whenever you need to disambiguate elements within the original nested structure,
# and DataWave ingest has been configured to preserve that context by appending it as a suffix to the persisted field
# names

#
# 'MATCHES_IN_GROUP_LEFT' Function Reference:
#
# The function has the form...
#
#       MATCHES_IN_GROUP_LEFT(FIELD1, 'F1VALUE', FIELD2, 'F2VALUE', ..., FIELDn, 'FnVALUE', INTEGER)
#
# ...where FIELDx/FxVALUE pairs are the DataWave key/value pairs of interest, and where the INTEGER argument is a value
# greater than or equal to zero, where 0 means "has the same parent element", 1: "has the same grandparent element",
# 2: "has the same great-grandparent element", 3: "same great-great-grandparent", and so on
#
# See the reference section at the bottom of this file for more info, including the Accumulo keys and raw JSON examples
#

####################################################################################################
# This test uses MATCHES_IN_GROUP_LEFT to pull back 'The Big Bang Theory' within our example data file, 'tvmaze-api.json'

# We'll search for comedies where the given actor names are in the same cast. That is, comedies from our JSON where
# 'name' elements 'Jim Parsons' and 'Johnny Galecki' are descendants of the same great-grandparent (2), or 'embedded',
# element...

setCurlData query=$( urlencode "GENRES:comedy AND #MATCHES_IN_GROUP_LEFT(EMBEDDED_CAST_PERSON_NAME, 'jim parsons', EMBEDDED_CAST_PERSON_NAME, 'johnny galecki', 2)" ) \
        queryName=EventQueryGroupedJsonSameGreatgrandparent \
        begin=19700101 \
        end=20990101 \
        pagesize=1 \
        auths=BAR,FOO,PRIVATE \
        columnVisibility=PRIVATE \
        query.syntax=LUCENE

# Note the grouping suffix appended to these field names in the DataWave shard table, and note that their grouping
# context indicates that they originated from EMBEDDED_0's 'CAST' array, where EMBEDDED_0 is the great-grandparent
# of each 'NAME'...

# 20070924_0 json\x00-r5sogy.30uc2y.a9zr4g:EMBEDDED_CAST_PERSON_NAME.EMBEDDED_0.CAST_2.PERSON_0.NAME_0\x00Johnny Galecki [PRIVATE|(BAR&FOO)]
# 20070924_0 json\x00-r5sogy.30uc2y.a9zr4g:EMBEDDED_CAST_PERSON_NAME.EMBEDDED_0.CAST_3.PERSON_0.NAME_0\x00Jim Parsons [PRIVATE|(BAR&FOO)]

configureTest \
        GroupedWithSameGreatgrandparent \
        "Attempt to match specific cousin elements originating from the same JSON 'cast' array" \
        "--header 'Content-Type: application/x-www-form-urlencoded' ${DW_CURL_DATA} -X POST ${URI_ROOT}/Query/EventQuery/create" \
        "application/xml;charset=UTF-8" \
        200

runTest --set-query-id

###################################################################
# Get 1st page from /Query/${DW_QUERY_ID}/next, in JSON format

configureTest \
        GroupedWithSameGreatgrandparentPage1 \
        "Gets the 1st page of results for the GroupedWithSameGreatgrandparent test in JSON format" \
        "--header 'Accept: application/json' -X GET ${URI_ROOT}/Query/${DW_QUERY_ID}/next" \
        application/json \
        200

runTest

###################################################################
# Close the query

configureCloseQueryTest ${DW_QUERY_ID}

runTest

####################################################################################################
# This test uses MATCHES_IN_GROUP_LEFT to match on elements sharing the same parent (0) within our example data file, 'tvmaze-api.json'

# Match up "sibling" ID and NAME elements of the 'Andrew Lincoln' PERSON parent object

setCurlData query=$( urlencode "GENRES:horror AND #MATCHES_IN_GROUP_LEFT(EMBEDDED_CAST_PERSON_ID, '10257', EMBEDDED_CAST_PERSON_NAME, 'Andrew Lincoln', 0)" ) \
        queryName=EventQueryGroupedJsonSameParent \
        begin=19700101 \
        end=20990101 \
        pagesize=1 \
        auths=BAR,FOO,PRIVATE \
        columnVisibility=PRIVATE \
        query.syntax=LUCENE

#
# 20101031_0 json\x00-giuhai.-5lhcm5.fac22f:EMBEDDED_CAST_PERSON_ID.EMBEDDED_0.CAST_0.PERSON_0.ID_0\x0010257 [PRIVATE|(BAR&FOO)]
# 20101031_0 json\x00-giuhai.-5lhcm5.fac22f:EMBEDDED_CAST_PERSON_NAME.EMBEDDED_0.CAST_0.PERSON_0.NAME_0\x00Andrew Lincoln [PRIVATE|(BAR&FOO)]
#

configureTest \
        GroupedWithSameParent \
        "Attempt to match 'ID' and 'NAME' values that are siblings within 'PERSON' parent object" \
        "--header 'Content-Type: application/x-www-form-urlencoded' ${DW_CURL_DATA} -X POST ${URI_ROOT}/Query/EventQuery/create" \
        "application/xml;charset=UTF-8" \
        200

runTest --set-query-id

###################################################################
# Get 1st page from /Query/${DW_QUERY_ID}/next, in JSON format

configureTest \
        GroupedWithSameParentPage1 \
        "Gets the 1st page of results for the GroupedWithSameParent test in JSON format" \
        "--header 'Accept: application/json' -X GET ${URI_ROOT}/Query/${DW_QUERY_ID}/next" \
        application/json \
        200

runTest

###################################################################
# Close the query

configureCloseQueryTest ${DW_QUERY_ID}

runTest

####################################################################################################
# Same as test above, but we get no match because we're referencing the wrong level of the tree
# Test gets no results because the given 'EMBEDDED_CAST_PERSON_NAME' elements are not siblings

setCurlData query=$( urlencode "GENRES:comedy AND #MATCHES_IN_GROUP_LEFT(EMBEDDED_CAST_PERSON_NAME, 'jim parsons', EMBEDDED_CAST_PERSON_NAME, 'johnny galecki', 0)" ) \
        queryName=EventQueryGroupedJson204AsSiblings \
        begin=19700101 \
        end=20990101 \
        pagesize=1 \
        auths=BAR,FOO,PRIVATE \
        columnVisibility=PRIVATE \
        query.syntax=LUCENE

configureTest \
        CreateNoMatchForGroupedSiblings \
        "Attempt to find 'NAME' field siblings that are actually cousins. Gets 204 - No results" \
        "--header 'Content-Type: application/x-www-form-urlencoded' ${DW_CURL_DATA} -X POST ${URI_ROOT}/Query/EventQuery/create" \
        "application/xml;charset=UTF-8" \
        200

runTest --set-query-id

###################################################################
# Call 'next' and get 204

configureTest \
        NoMatchForGroupedSiblings204 \
        "204 on 'next' for the CreateNoMatchForGroupedSiblings test" \
        "--header 'Accept: application/json' -X GET ${URI_ROOT}/Query/${DW_QUERY_ID}/next" \
        "" \
        204

###############################################################################################
###############################################################################################
#
# Example queries, associated Accumulo keys, and raw source data...
#
# Queries...
#  "NUMBER:101 AND #MATCHES_IN_GROUP_LEFT(NAME, 'P1Name', NAME, 'P2Name', 1)" - MATCH b/c P1Name and P1Name are 1st cousins
#  "NUMBER:101 AND #MATCHES_IN_GROUP_LEFT(NAME, 'P1Name', NAME, 'P2Name', 0)" - NO MATCH b/c they are only cousins, ie, parents are different
#  "NUMBER:101 AND #MATCHES_IN_GROUP_LEFT(NAME, 'P1Name', NAME, 'P2Name', 2)" - MATCH b/c they by definition share the same great-grandparent
#  "NUMBER:101 AND #MATCHES_IN_GROUP_LEFT(NAME, 'P1Name', NAME, 'P2Name', 3)" - NO MATCH b/c there is no GREAT-GREAT-grandparent
# Keys...
#   20171212_0 json\x00-j7sw3h.m7kgcw.-nzqusw:NUMBER.ROOTOBJECT_0.NUMBER_0\x00101 [PRIVATE|(BAR&FOO)]
#   20171212_0 json\x00-j7sw3h.m7kgcw.-nzqusw:NAME.ROOTOBJECT_0.PROPERTIES_0.ARRAY_1.NAME_0\x00P2Name [PRIVATE|(BAR&FOO)]
#   20171212_0 json\x00-j7sw3h.m7kgcw.-nzqusw:NAME.ROOTOBJECT_0.PROPERTIES_0.ARRAY_0.NAME_0\x00P1Name [PRIVATE|(BAR&FOO)]
#
# Queries...
#  "NUMBER:101 AND #MATCHES_IN_GROUP_LEFT(NAME, 'P2Name', VALUE, 'Two', DESCRIPTION, 'Description for P2Name', 0)" - MATCH b/c elements are siblings
#  "NUMBER:101 AND #MATCHES_IN_GROUP_LEFT(NAME, 'P2Name', VALUE, 'Two', DESCRIPTION, 'Description for P2Name', 1)" - MATCH b/c they have same grandparent by definition
# Keys...
#   20171212_0 json\x00-j7sw3h.m7kgcw.-nzqusw:NUMBER.ROOTOBJECT_0.NUMBER_0\x00101 [PRIVATE|(BAR&FOO)]
#   20171212_0 json\x00-j7sw3h.m7kgcw.-nzqusw:NAME.ROOTOBJECT_0.PROPERTIES_0.ARRAY_1.NAME_0\x00P2Name [PRIVATE|(BAR&FOO)]
#   20171212_0 json\x00-j7sw3h.m7kgcw.-nzqusw:VALUE.ROOTOBJECT_0.PROPERTIES_0.ARRAY_1.VALUE_0\x00Two [PRIVATE|(BAR&FOO)]
#   20171212_0 json\x00-j7sw3h.m7kgcw.-nzqusw:DESCRIPTION.ROOTOBJECT_0.PROPERTIES_0.ARRAY_1.DESCRIPTION_0\x00Description for P2Name [PRIVATE|(BAR&FOO)]
#
# Source raw JSON document...
#
# {
#   "id" : "ID00000000005",
#   "rootobject":
#   {
#     "sTrInG1": "string1 text",
#     "boolean": true,
#     "number": 101,
#     "string2": "string2 text",
#     "number2": "20000",
#     "date" : [ "2017-01-01T01:01:01Z", "2017-02-01T02:02:01Z", "2017-03-01T03:03:03Z" ],
#     "randomobject":
#     {
#       "boolean": false,
#       "number": "150",
#       "string": "horse"
#     },
#     "properties":
#     {
#       "array":
#       [
#         {
#           "name": "P1Name",
#           "value": "1",
#           "description": "Description for P1Name"
#         },
#         {
#           "name": "P2Name",
#           "value": "Two",
#           "description": "Description for P2Name"
#         },
#         [ { "name": "InnerPName1", "value": "InnerPValue1" }, { "name": "InnerPName2", "value": "InnerPValue2" } ]
#       ]
#     }
#   },
#   "date" : "2017-01-04T01:00:00Z",
#   "number" : 40,
#   "array" : [ "ITEM1", false, 7, { "more" : "nested", "stuff" : "to deal with" } ]
#  }
#